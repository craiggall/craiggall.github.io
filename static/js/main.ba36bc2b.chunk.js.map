{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["urls","WeakMap","blobUrl","blob","has","console","log","get","url","URL","createObjectURL","set","App","filesFragment","_useState","useState","_useState2","Object","slicedToArray","files","setFiles","button","react_default","a","createElement","id","type","accept","multiple","onChange","e","pics","start","performance","now","i","target","length","file","Compressor","quality","maxWidth","maxHeight","success","result","push","end","document","getElementById","innerHTML","concat","error","err","message","value","map","key","name","className","style","height","alt","src","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0NAOIA,UAAO,IAAIC,SAEXC,EAAU,SAAAC,GACZ,GAAIH,EAAKI,IAAID,GAEX,OADAE,QAAQC,IAAI,8BACLN,EAAKO,IAAIJ,GAEhBE,QAAQC,IAAI,uBACZ,IAAIE,EAAMC,IAAIC,gBAAgBP,GAE9B,OADAH,EAAKW,IAAIR,EAAMK,GACRA,GAgEII,MA5Df,WAAe,IAiCTC,EAjCSC,EACWC,mBAAS,IADpBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACRK,EADQH,EAAA,GACDI,EADCJ,EAAA,GAGTK,EAASC,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,SAAOC,GAAG,YAAYC,KAAK,OAAOC,OAAO,UAAUC,UAAQ,EAACC,SAAU,SAAAC,GAGtF,IAFA,IAAIC,EAAO,GACPC,EAAQC,YAAYC,MAChBC,EAAG,EAAGA,EAAIL,EAAEM,OAAOjB,MAAMkB,OAAQF,IAAI,CAE3C,IAAIG,EAAOR,EAAEM,OAAOjB,MAAMgB,GAC1B,IAAKG,EACH,OAEF,IAAIC,IAAWD,EAAM,CACnBE,QAAS,GACTC,SAAU,IACVC,UAAW,IACXC,QAJmB,SAIXC,GACNb,EAAKc,KAAKD,GACV,IAAIE,EAAMb,YAAYC,MACtBa,SAASC,eAAe,WAAWC,WAAa,6BAA+BH,EAAMd,GAAS,gBAC9FZ,EAASD,EAAM+B,OAAOnB,KAExBoB,MAVmB,SAUbC,GACJ/C,QAAQC,IAAI8C,EAAIC,YAOtBN,SAASC,eAAe,aAAaM,MAAQ,QAC3ChC,EAAAC,EAAAC,cAAA,iCAcJ,OAPIX,EAHCM,EAAMkB,OAGSlB,EAAMoC,IAAI,SAAAjB,GACtB,IAAI9B,EAAM8B,GAAQpC,EAAQoC,GAC1B,OAAOhB,EAAAC,EAAAC,cAAA,OAAKgC,IAAKlB,EAAKmB,KAAMC,UAAU,2BAA0BpC,EAAAC,EAAAC,cAAA,OAAKmC,MAAO,CAACC,OAAS,KAAMC,IAAI,GAAGC,IAAKtD,OAJ5Fc,EAAAC,EAAAC,cAAA,OAAKkC,UAAU,0CAAf,sCAUlBpC,EAAAC,EAAAC,cAAA,OAAKkC,UAAU,OACPpC,EAAAC,EAAAC,cAAA,OAAKkC,UAAU,oCACXpC,EAAAC,EAAAC,cAAA,OAAKkC,UAAU,2CACV7C,IAGTS,EAAAC,EAAAC,cAAA,OAAKkC,UAAU,2CACVrC,GAELC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,cChEAsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASvB,SAASC,eAAe,SD0H3C,kBAAmBuB,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ba36bc2b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport './App.css';\nimport Compressor from 'compressorjs';\nimport Promise from 'promise-polyfill';\n\n\n\nlet urls = new WeakMap()\n\nlet blobUrl = blob => {\n  if (urls.has(blob)) {\n    console.log(\"Fetching existing blob url\")\n    return urls.get(blob)\n  } else {\n    console.log(\"Create new blob url\")\n    let url = URL.createObjectURL(blob)\n    urls.set(blob, url)\n    return url\n  }\n}\n\nfunction App() {\n  let [files, setFiles] = useState([])\n\n  let button = <div><input id=\"picUpload\" type=\"file\" accept=\"image/*\" multiple onChange={e => {\n    let pics = [];\n    var start = performance.now();\n    for(var i =0; i < e.target.files.length; i++){\n\n      let file = e.target.files[i];\n      if (!file) {\n        return;\n      }\n      new Compressor(file, {\n        quality: 0.8,\n        maxWidth: 2000,\n        maxHeight: 2000,\n        success(result) {\n          pics.push(result);\n          var end = performance.now();\n          document.getElementById(\"timings\").innerHTML += \"Picture compression time:\" + (end - start) + \" milliseconds\";\n          setFiles(files.concat(pics));\n        },\n        error(err) {\n          console.log(err.message);\n        },\n      });\n    }\n\n\n\n    document.getElementById(\"picUpload\").value = null;\n  }}/><label>Add attachments</label></div>\n\n  let filesFragment;\n\n  if (!files.length) {\n      filesFragment = <div className=\"she-question-attachments-empty-message\">You have not added any images yet.</div>\n  } else {\n      filesFragment = files.map(file => {\n          let url = file && blobUrl(file);\n          return <div key={file.name} className=\"she-question-attachment\"><img style={{height : 120}} alt=\"\" src={url}/></div> \n      } )\n  }\n\n\n  return (\n    <div className=\"App\">\n            <div className=\"she-question-attachments-wrapper\">\n                <div className=\"she-question-attachments-images-wrapper\">\n                    {filesFragment}\n                </div>\n            </div>\n            <div className=\"she-question-attachments-button-wrapper\">\n                {button}\n            </div>\n            <div id=\"timings\"></div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie11';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}